{"ast":null,"code":"var _jsxFileName = \"D:\\\\Project_3\\\\Game-of-Chance\\\\game-of-chance\\\\src\\\\components\\\\forms\\\\LoginForm.js\";\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport Validator from \"validator\";\nimport InlineError from \"../messages/InlineError\";\n\nclass LoginForm extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      data: {\n        email: '',\n        password: ''\n      },\n      loading: false,\n      errors: {}\n    };\n\n    this.onChange = e => this.setState({\n      data: { ...this.state.data,\n        [e.target.name]: e.target.value\n      }\n    });\n\n    this.onSubmit = () => {\n      const errors = this.validate(this.state.data);\n      this.setState({\n        errors\n      });\n\n      if (Object.keys(errors).length === 0) {\n        this.props.submit(this.state.data);\n      }\n    };\n\n    this.validate = data => {\n      const errors = {};\n      if (!Validator.isEmail(data.email)) errors.email = \"Invalid email!\";\n      if (!data.password) errors.password = \"Oh no! Something went wrong.\";\n      return errors;\n    };\n  }\n\n  render() {\n    const {\n      data,\n      errors\n    } = this.state;\n    return /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.onSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"email\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 21\n      }\n    }, \"Email\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"email\",\n      id: \"email\",\n      placeholder: \"JohnSmith@example.com\",\n      value: data.email,\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 21\n      }\n    }), errors.email && /*#__PURE__*/React.createElement(InlineError, {\n      text: errors.email,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 38\n      }\n    })), /*#__PURE__*/React.createElement(Form.Field, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"label\", {\n      htmlFor: \"password\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 21\n      }\n    }, \"Password\"), /*#__PURE__*/React.createElement(\"input\", {\n      type: \"password\",\n      id: \"password\",\n      placeholder: \"Password\",\n      value: data.password,\n      onChange: this.onChange,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 21\n      }\n    }), errors.password && /*#__PURE__*/React.createElement(InlineError, {\n      text: errors.password,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 41\n      }\n    })), /*#__PURE__*/React.createElement(Button, {\n      primary: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }, \"Login\"));\n  }\n\n}\n\nLoginForm.propTypes = {};\nexport default LoginForm;","map":{"version":3,"sources":["D:/Project_3/Game-of-Chance/game-of-chance/src/components/forms/LoginForm.js"],"names":["React","PropTypes","Form","Button","Validator","InlineError","LoginForm","Component","state","data","email","password","loading","errors","onChange","e","setState","target","name","value","onSubmit","validate","Object","keys","length","props","submit","isEmail","render","propTypes"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Form, Button } from \"semantic-ui-react\";\nimport Validator from \"validator\";\nimport InlineError from \"../messages/InlineError\";\n\nclass LoginForm extends React.Component {\n    state = {\n        data: {\n            email: '',\n            password: ''\n        },\n        loading: false,\n        errors: {},\n    };\n\n    //onChange Event\n    onChange = e => this.setState({data: {...this.state.data, [e.target.name]: e.target.value}\n    });\n\n\n    onSubmit = () => {\n        const errors =this.validate(this.state.data);\n        this.setState({errors});\n        if (Object.keys(errors).length === 0) {\n            this.props.submit(this.state.data);\n        }\n    };\n\n    //Validation\n    validate = (data) => {\n        const errors ={};\n        if (!Validator.isEmail(data.email)) errors.email = \"Invalid email!\";\n        if  (!data.password) errors.password = \"Oh no! Something went wrong.\";\n        return errors;\n    }\n\n    render() {\n        const {data, errors} = this.state;\n\n        return (\n            <Form onSubmit={this.onSubmit}>\n                <Form.Field>\n                    <label htmlFor=\"email\">Email</label>\n                    <input\n                        type=\"email\"\n                        id=\"email\"\n                        placeholder=\"JohnSmith@example.com\"\n                        value={data.email}\n                        onChange={this.onChange}\n                    />\n                    {errors.email && <InlineError text={errors.email} />}\n                </Form.Field>\n                <Form.Field>\n                    <label htmlFor=\"password\">Password</label>\n                    <input\n                        type=\"password\"\n                        id=\"password\"\n                        placeholder=\"Password\"\n                        value={data.password}\n                        onChange={this.onChange}\n                    />\n                    {errors.password && <InlineError text={errors.password} />}\n                </Form.Field>\n                <Button primary>Login</Button>\n            </Form>\n        );\n    }\n}\n\nLoginForm.propTypes = {\n\n};\n\nexport default LoginForm;"]},"metadata":{},"sourceType":"module"}